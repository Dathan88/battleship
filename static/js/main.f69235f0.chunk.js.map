{"version":3,"sources":["Components/BoardHeader.jsx","Components/Squares.jsx","Components/Board.jsx","Factories/shipyard.js","Factories/gameboard.js","Factories/player.js","Components/GameUI.jsx","App.js","serviceWorker.js","index.js"],"names":["BoardHeader","react_default","a","createElement","className","id","this","props","playersInfo","name","Component","Squares","squaresClass","onClick","onMouseDown","value","key","position","Board","_this","sqClass","sq","board","hitClass","hits","includes","missClass","missed","plyrShipClass","shipSpots","neutral","classNames","board-squares btn","hit btn","miss btn","playerShips btn","disabled btn","squares","map","i","Components_Squares","handleMouseDown","Shipyard","length","coordinates","health","ship_hull","Object","toConsumableArray","Array","fill","_","isSunk","Math","max","apply","hit","x","Gameboard","columns","rows","String","fromCharCode","toUpperCase","fleet","shotsFired","kills","ship_info","1","2","3","4","5","randomNum","j","push","len","entries","values","build","arguments","undefined","floor","random","checkPlacement","find","el","shipPos","shipRow","forEach","k","shipColumn","toString","incoming","enemy","each_ship_spots","shipName","checkIncoming","findIndex","spot","shipHit","randomShots","turn","Player","_attack_options","last_hit_index","square","area","target","filter","miss","check_wounded_ship","_comp_attack_type","attack","comp_attack","wounded_ship","generalArea","concat","document","getElementById","console","log","getName","current_player","user","computer","GameUI","human","BoardHeader_BoardHeader","Board_Board","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","commentary_array","checkWin","state","userNum","compNum","gameOver","winningText","Fragment","setState","commentary","disableApp","game_over","computer_attack","click","handleClick","bind","assertThisInitialized","playerName","shipSunk","sinking","update_kills","shift","text","e","_this2","fire","innerHTML","update_commentary","setTimeout","BrowserRouter","GameUI_GameUI","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f69235f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class BoardHeader extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<h2 className='board-header' id={this.props.playersInfo.id + '-header'}>\r\n\t\t\t\t{this.props.playersInfo.name}\r\n\t\t\t</h2>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\r\n\r\nconst Squares = props => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={props.squaresClass}\r\n\t\t\tid={props.id}\r\n\t\t\tonClick={props.onClick}\r\n\t\t\tonMouseDown={props.onMouseDown}\r\n\t\t\tvalue={props.value}\r\n\t\t\tkey={props.position}\r\n\t\t>\r\n\t\t\t{props.value}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Squares;\r\n","import React, { Component } from 'react';\r\nimport Squares from './Squares';\r\nimport classNames from 'classnames';\r\n\r\nexport default class Board extends Component {\r\n\trender() {\r\n\t\tconst sqClass = sq => {\r\n\t\t\tconst board = this.props.playersInfo.board;\r\n\t\t\tconst hitClass = board.hits.includes(sq);\r\n\t\t\tconst missClass = board.missed.includes(sq);\r\n\t\t\tconst plyrShipClass =\r\n\t\t\t\tthis.props.playersInfo.id === 'computer' &&\r\n\t\t\t\tboard.shipSpots.includes(sq);\r\n\t\t\tconst neutral =\r\n\t\t\t\thitClass === false && missClass === false && plyrShipClass === false;\r\n\r\n\t\t\treturn classNames({\r\n\t\t\t\t'board-squares btn': neutral,\r\n\t\t\t\t'hit btn': hitClass,\r\n\t\t\t\t'miss btn': missClass,\r\n\t\t\t\t'playerShips btn': plyrShipClass,\r\n\t\t\t\t'disabled btn': hitClass || missClass,\r\n\t\t\t});\r\n\t\t};\r\n\t\treturn (\r\n\t\t\t<div className='boards' id={this.props.playersInfo.id + '-board'}>\r\n\t\t\t\t{this.props.playersInfo.squares.map((sq, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Squares\r\n\t\t\t\t\t\t\tonClick={this.props.onClick}\r\n\t\t\t\t\t\t\tonMouseDown={this.handleMouseDown}\r\n\t\t\t\t\t\t\tvalue={sq}\r\n\t\t\t\t\t\t\tposition={i + 1}\r\n\t\t\t\t\t\t\tid={this.props.playersInfo.id + '-' + sq}\r\n\t\t\t\t\t\t\tkey={i + 1}\r\n\t\t\t\t\t\t\tsquaresClass={sqClass(sq)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","const Shipyard = (name, length, coordinates) => {\r\n\tlet health = length;\r\n\tlet ship_hull = [\r\n\t\t...Array(length)\r\n\t\t\t.fill(1)\r\n\t\t\t.map((_, i) => 1 + i),\r\n\t];\r\n\t//returns true if ship hull[] values are all 0 else false for hit\r\n\tconst isSunk = () => {\r\n\t\tif (Math.max.apply(null, ship_hull) === 0) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\t//places 0 in position ship was hit; asks isSunk to check status\r\n\tconst hit = x => {\r\n\t\tship_hull[x] = 0;\r\n\t\treturn isSunk();\r\n\t};\r\n\treturn { name, length, coordinates, health, isSunk, hit };\r\n};\r\n\r\nexport default Shipyard;\r\n","import Shipyard from './shipyard.js';\r\n\r\nconst Gameboard = () => {\r\n\tconst columns = [\r\n\t\t...Array(10)\r\n\t\t\t.fill(1)\r\n\t\t\t.map((_, i) => 1 + i),\r\n\t];\r\n\tconst rows = [\r\n\t\t...Array(10)\r\n\t\t\t.fill(1)\r\n\t\t\t.map((_, i) => String.fromCharCode(97 + i).toUpperCase()),\r\n\t];\r\n\tconst fleet = [];\r\n\tconst missed = [];\r\n\tconst hits = [];\r\n\tconst shotsFired = [];\r\n\tconst squares = [];\r\n\tconst shipSpots = [];\r\n\tconst kills = [];\r\n\tconst ship_info = {\r\n\t\t1: {\r\n\t\t\tname: 'Aircraft Carrier',\r\n\t\t\tlength: 5,\r\n\t\t},\r\n\t\t2: {\r\n\t\t\tname: 'Battleship',\r\n\t\t\tlength: 4,\r\n\t\t},\r\n\t\t3: {\r\n\t\t\tname: 'Submarine',\r\n\t\t\tlength: 3,\r\n\t\t},\r\n\t\t4: { name: 'Cruiser', length: 3 },\r\n\t\t5: { name: 'Destroyer', length: 2 },\r\n\t};\r\n\r\n\t//digital version of board placed into squares array\r\n\t//eslint-disable-next-line\r\n\tconst _createSquares = (() => {\r\n\t\tfor (let i = 0; i < 10; i++) {\r\n\t\t\tfor (let j = 0; j < 10; j++) {\r\n\t\t\t\tsquares.push(rows[i] + columns[j]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn squares;\r\n\t})();\r\n\r\n\t//send ship_info to shipyard and place into fleet\r\n\t//eslint-disable-next-line\r\n\tconst _createShips = (() => {\r\n\t\tlet len = Object.entries(ship_info).length;\r\n\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\tlet values = Object.entries(ship_info)[i][1];\r\n\t\t\tconst build = Shipyard(values.name, values.length, values.coordinates);\r\n\r\n\t\t\tfleet.push(build);\r\n\t\t}\r\n\t})();\r\n\r\n\t//called from ship_placement\r\n\tconst randomNum = (x = squares.length) => {\r\n\t\treturn Math.floor(Math.random() * x);\r\n\t};\r\n\r\n\t//called from ship_placement\r\n\tconst checkPlacement = x => {\r\n\t\treturn shipSpots.find(el => el === x);\r\n\t};\r\n\r\n\t//eslint-disable-next-line\r\n\tconst ship_placement = (() => {\r\n\t\tfor (let i = 0; i < fleet.length; i++) {\r\n\t\t\tlet shipPos = (fleet[i].coordinates = []);\r\n\t\t\tlet random = randomNum(10);\r\n\r\n\t\t\t//row placement & column placement in relation to random number\r\n\t\t\t//random < 5 = rows & random > 5 = columns\r\n\t\t\tif (random < 5) {\r\n\t\t\t\trandom = randomNum(10);\r\n\t\t\t\trestartLoop2: for (let j = 0; j < fleet[i].length; j++) {\r\n\t\t\t\t\tlet shipRow = rows[random];\r\n\t\t\t\t\tshipPos[j] = shipRow + columns[random + j];\r\n\r\n\t\t\t\t\t//check that ships don't place on same squares\r\n\t\t\t\t\tif (shipPos[j] === shipRow + 'undefined') {\r\n\t\t\t\t\t\tshipPos = fleet[i].coordinates = [];\r\n\t\t\t\t\t\tj = -1;\r\n\t\t\t\t\t\trandom = randomNum(10);\r\n\t\t\t\t\t\tcontinue restartLoop2;\r\n\t\t\t\t\t} else if (checkPlacement(shipPos[j]) === shipPos[j]) {\r\n\t\t\t\t\t\tshipPos = fleet[i].coordinates = [];\r\n\t\t\t\t\t\tj = -1;\r\n\t\t\t\t\t\trandom = randomNum(10);\r\n\t\t\t\t\t\tcontinue restartLoop2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//track ship placement to prevent ships sharing squares\r\n\t\t\t\tshipPos.forEach(el => {\r\n\t\t\t\t\tshipSpots.push(el);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\trandom = randomNum(10);\r\n\t\t\t\trestartLoop3: for (let k = 0; k < fleet[i].length; k++) {\r\n\t\t\t\t\tlet shipColumn = [columns[random]];\r\n\t\t\t\t\tshipPos[k] = rows[random + k] + shipColumn;\r\n\r\n\t\t\t\t\t//check that ships don't place on same squares\r\n\t\t\t\t\tif (shipPos[k] === 'undefined' + shipColumn.toString()) {\r\n\t\t\t\t\t\tshipPos = fleet[i].coordinates = [];\r\n\t\t\t\t\t\tk = -1;\r\n\t\t\t\t\t\trandom = randomNum(10);\r\n\t\t\t\t\t\tcontinue restartLoop3;\r\n\t\t\t\t\t} else if (checkPlacement(shipPos[k]) === shipPos[k]) {\r\n\t\t\t\t\t\tshipPos = fleet[i].coordinates = [];\r\n\t\t\t\t\t\tk = -1;\r\n\t\t\t\t\t\trandom = randomNum(10);\r\n\t\t\t\t\t\tcontinue restartLoop3;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//track ship placement to prevent ships sharing squares\r\n\t\t\t\tshipPos.forEach(el => {\r\n\t\t\t\t\tshipSpots.push(el);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t})();\r\n\r\n\t//shots fired stored in kills/hits/missed and return true/false/null\r\n\tconst incoming = (x, enemy) => {\r\n\t\t//stores all shots regardless of outcome\r\n\t\tshotsFired.push(x);\r\n\r\n\t\tfor (let i = 0; i < fleet.length; i++) {\r\n\t\t\t//if x value in ship coordinates return index/-1 if not\r\n\t\t\tconst each_ship_spots = fleet[i].coordinates;\r\n\t\t\tconst shipName = fleet[i].name;\r\n\t\t\tconst checkIncoming = each_ship_spots.findIndex(spot => spot === x);\r\n\r\n\t\t\t//checkIncoming for sunk/hit/miss\r\n\t\t\t//sunk = true&pushes ship to kills/hit = false/miss = null\r\n\t\t\tif (checkIncoming !== -1) {\r\n\t\t\t\tconst shipHit = fleet[i].hit(checkIncoming, enemy);\r\n\t\t\t\thits.push(x);\r\n\t\t\t\teach_ship_spots[checkIncoming] = 0;\r\n\t\t\t\treturn shipHit ? (kills.push(shipName), shipHit) : shipHit;\r\n\t\t\t} else if (checkIncoming === -1 && i === 4) {\r\n\t\t\t\tmissed.push(x);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t//assist with computer shots before being sent to incoming\r\n\tconst randomShots = () => {\r\n\t\tlet x = squares[Math.floor(Math.random() * squares.length)];\r\n\t\t//if x has been shot before, roll again\r\n\t\tif (x === 0 || shotsFired.find(value => value === x) !== undefined) {\r\n\t\t\treturn randomShots();\r\n\t\t}\r\n\t\treturn x;\r\n\t};\r\n\r\n\treturn {\r\n\t\tfleet,\r\n\t\tincoming,\r\n\t\trandomShots,\r\n\t\tsquares,\r\n\t\tshotsFired,\r\n\t\tkills,\r\n\t\thits,\r\n\t\tmissed,\r\n\t\tshipSpots,\r\n\t\trandomNum,\r\n\t};\r\n};\r\n\r\nexport default Gameboard;\r\n","import Gameboard from '../Factories/gameboard';\r\n\r\n//track player turns ~ below Player factory\r\nlet turn = 0;\r\nconst Player = name => {\r\n\tconst board = Gameboard();\r\n\tconst getName = () => name;\r\n\r\n\t//recieves last hit and returns future potential hit spots\r\n\tconst _attack_options = x => {\r\n\t\tconst searching = [1, -1, 10, -10];\r\n\t\tconst last_hit_index = board.squares.findIndex(square => square === x);\r\n\t\tconst update_hit_index = searching.map(area => area + last_hit_index);\r\n\r\n\t\tconst directions = update_hit_index\r\n\t\t\t.map(target => board.squares[target])\r\n\t\t\t.filter(square => square !== undefined);\r\n\r\n\t\tconst updated_directions = directions\r\n\t\t\t.filter(miss => board.missed.includes(miss) !== true)\r\n\t\t\t.filter(hit => board.hits.includes(hit) !== true);\r\n\r\n\t\treturn updated_directions;\r\n\t};\r\n\r\n\t// checks if random shot hits enemy ship without running function\r\n\tconst check_wounded_ship = x => {\r\n\t\tconst enemy_ships = board.shipSpots;\r\n\r\n\t\treturn enemy_ships.includes(x);\r\n\t};\r\n\r\n\t//x = shot selected/enemy is receiving player\r\n\t//increase turn value above Player factory\r\n\t//shot return values : true = sunk+ship info, false = hit, null = missed\r\n\tconst attack = (x, enemy) => {\r\n\t\tturn++;\r\n\t\tconst shot = board.incoming(x, enemy);\r\n\r\n\t\treturn shot;\r\n\t};\r\n\r\n\tlet _comp_attack_type = 0;\r\n\r\n\t// controls computer attack logic before sending to attack\r\n\tconst comp_attack = () => {\r\n\t\tconst x = board.randomShots();\r\n\t\tconst wounded_ship = check_wounded_ship(x);\r\n\t\tconst generalArea = [].concat.apply([], board.hits.map(_attack_options));\r\n\r\n\t\tswitch (_comp_attack_type) {\r\n\t\t\tcase 0:\r\n\t\t\t\tif (wounded_ship === true) {\r\n\t\t\t\t\t_comp_attack_type = 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn document.getElementById('computer-' + x);\r\n\t\t\tcase 1:\r\n\t\t\t\tconst target = generalArea[0];\r\n\t\t\t\tif (generalArea.length === 0) {\r\n\t\t\t\t\t_comp_attack_type = 0;\r\n\t\t\t\t\treturn document.getElementById('computer-' + x);\r\n\t\t\t\t}\r\n\t\t\t\treturn document.getElementById('computer-' + target);\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('default');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\r\n\treturn {\r\n\t\tname,\r\n\t\tattack,\r\n\t\tcomp_attack,\r\n\t\tgetName,\r\n\t\tboard,\r\n\t\tcheck_wounded_ship,\r\n\t};\r\n};\r\n\r\n//keeps track of players with (turn) variable above factory\r\nconst current_player = () => {\r\n\treturn turn % 2 === 0 ? user : computer;\r\n};\r\n\r\nconst user = Player('Player 1');\r\nconst computer = Player('Sir Francis Drake');\r\n\r\nexport { current_player, user, computer };\r\n","import React, { Component } from 'react';\r\nimport BoardHeader from './BoardHeader';\r\nimport Board from './Board';\r\nimport { user, computer } from '../Factories/player';\r\n\r\nexport default class GameUI extends Component {\r\n\trender() {\r\n\t\tconst playersInfo = {\r\n\t\t\thuman: {\r\n\t\t\t\tname: user.name,\r\n\t\t\t\tid: 'human',\r\n\t\t\t\tboard: user.board,\r\n\t\t\t\tsquares: user.board.squares,\r\n\t\t\t},\r\n\t\t\tcomputer: {\r\n\t\t\t\tname: computer.name,\r\n\t\t\t\tid: 'computer',\r\n\t\t\t\tboard: computer.board,\r\n\t\t\t\tsquares: computer.board.squares,\r\n\t\t\t},\r\n\t\t};\r\n\t\treturn (\r\n\t\t\t<div className='play-area'>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName='board-wrappers'\r\n\t\t\t\t\tid={playersInfo.human.id + '-board-wrapper'}\r\n\t\t\t\t>\r\n\t\t\t\t\t<BoardHeader playersInfo={playersInfo.human} />\r\n\t\t\t\t\t<Board playersInfo={playersInfo.human} onClick={this.props.onClick} />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName='board-wrappers'\r\n\t\t\t\t\tid={playersInfo.computer.id + '-board-wrapper'}\r\n\t\t\t\t>\r\n\t\t\t\t\t<BoardHeader playersInfo={playersInfo.computer} />\r\n\t\t\t\t\t<Board\r\n\t\t\t\t\t\tplayersInfo={playersInfo.computer}\r\n\t\t\t\t\t\tonClick={this.props.onClick}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport GameUI from './Components/GameUI';\r\nimport { current_player, user, computer } from './Factories/player';\r\nimport './App.css';\r\nimport './Components/Squares.css';\r\nimport './Components/Board.css';\r\nimport './Components/BoardHeader.css';\r\nimport './Components/GameUI.css';\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t\tthis.state = {\r\n\t\t\tuserNum: 0,\r\n\t\t\tcompNum: 0,\r\n\t\t\tcommentary: '',\r\n\t\t\tdisableApp: '',\r\n\t\t\tgame_over: false,\r\n\t\t\tsquaresClass: 'board-squares',\r\n\t\t};\r\n\t}\r\n\r\n\tenemy = () => (current_player() === user ? computer : user);\r\n\r\n\tcommentary_array = [];\r\n\r\n\tupdate_kills() {\r\n\t\tthis.setState({\r\n\t\t\tuserNum: user.board.kills.length,\r\n\t\t\tcompNum: computer.board.kills.length,\r\n\t\t});\r\n\t}\r\n\r\n\tupdate_commentary(x) {\r\n\t\t//this.enemy() is player that just fired\r\n\t\tconst playerName = this.enemy().name;\r\n\t\tconst enemy = current_player().name;\r\n\t\tconst kills = this.enemy().board.kills;\r\n\t\tconst shipSunk = kills[kills.length - 1];\r\n\t\tconst miss = this.enemy().name + ' missed';\r\n\t\tconst hit = playerName + ' damaged ' + enemy + \"'s ship\";\r\n\t\tconst sinking = playerName + ' sunk ' + enemy + \"'s \" + shipSunk;\r\n\r\n\t\tswitch (x) {\r\n\t\t\tcase null:\r\n\t\t\t\tthis.commentary_array.push(miss);\r\n\t\t\t\tbreak;\r\n\t\t\tcase false:\r\n\t\t\t\tthis.commentary_array.push(hit);\r\n\t\t\t\tbreak;\r\n\t\t\tcase true:\r\n\t\t\t\tthis.commentary_array.push(sinking);\r\n\t\t\t\tthis.update_kills();\r\n\t\t\t\tthis.checkWin();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('update_commentary switch error');\r\n\t\t}\r\n\r\n\t\tif (this.commentary_array.length === 6) {\r\n\t\t\tthis.commentary_array.shift();\r\n\t\t}\r\n\r\n\t\tconst text = this.commentary_array.map((x, i) => (\r\n\t\t\t<React.Fragment key={i}>\r\n\t\t\t\t{x}\r\n\t\t\t\t<br />\r\n\t\t\t</React.Fragment>\r\n\t\t));\r\n\r\n\t\tthis.setState({\r\n\t\t\tcommentary: text,\r\n\t\t});\r\n\r\n\t\tthis.checkWin();\r\n\t}\r\n\r\n\tcheckWin = () => {\r\n\t\tif (this.state.userNum === 5 || this.state.compNum === 5) {\r\n\t\t\tthis.commentary_array = [];\r\n\t\t\tconst gameOver = this.enemy().name + ' Wins the Game!!!';\r\n\t\t\tthis.commentary_array.push(gameOver);\r\n\r\n\t\t\tconst winningText = this.commentary_array.map((x, i) => (\r\n\t\t\t\t<React.Fragment key={i}>\r\n\t\t\t\t\t{x}\r\n\t\t\t\t\t<br />\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t));\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tcommentary: winningText,\r\n\t\t\t\tdisableApp: 'disabled',\r\n\t\t\t\tgame_over: true,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tcomputer_attack = () => {\r\n\t\tconst x = computer.comp_attack();\r\n\r\n\t\tx.click();\r\n\t};\r\n\r\n\thandleClick(e) {\r\n\t\tconst fire = current_player().attack(e.target.innerHTML, this.enemy());\r\n\r\n\t\tthis.update_commentary(fire);\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.checkWin();\r\n\t\t\tif (current_player() === computer && this.state.game_over === false) {\r\n\t\t\t\tthis.computer_attack();\r\n\t\t\t}\r\n\t\t}, 100);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Router>\r\n\t\t\t\t<div className={'App ' + this.state.disableApp}>\r\n\t\t\t\t\t<header className='App-header'>Battleship</header>\r\n\t\t\t\t\t<section className='scoreboard'>\r\n\t\t\t\t\t\t{user.name + \"'s Score: \" + this.state.userNum}\r\n\t\t\t\t\t</section>\r\n\t\t\t\t\t<section className='scoreboard'>\r\n\t\t\t\t\t\t{computer.name + \"'s Score: \" + this.state.compNum}\r\n\t\t\t\t\t</section>\r\n\t\t\t\t\t<section id='commentary-display'>{this.state.commentary}</section>\r\n\t\t\t\t\t<GameUI onClick={this.handleClick} />\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}